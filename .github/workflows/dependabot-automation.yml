name: Dependabot Auto Merge
on: pull_request

# Set the access for individual scopes, or use permissions: write-all
permissions:
  pull-requests: write
  issues: write
  repository-projects: write

jobs:
  merge-pr:
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    steps:
        - name: Dependabot metadata
          id: metadata
          uses: dependabot/fetch-metadata@v1
          with:
            github-token: "${{ secrets.GITHUB_TOKEN }}"
        - name: Approve a PR
          run: gh pr review --approve "$PR_URL"
          env:
            PR_URL: ${{github.event.pull_request.html_url}}
            GH_TOKEN: ${{secrets.GITHUB_TOKEN}}
        - name: Enable auto-merge for Dependabot PRs
          if: steps.metadata.outputs.update-type == 'version-update:semver-minor'
          run: gh pr merge --auto --merge "$PR_URL"
          env:
            PR_URL: ${{github.event.pull_request.html_url}}
            GH_TOKEN: ${{secrets.GITHUB_TOKEN}}
  create-release-branch:
    runs-on: ubuntu-latest
    needs: merge-pr
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Check if release-candidate branch exists
        run: |
          git fetch origin
          if git show-ref --quiet refs/remotes/origin/release-candidate; then
            echo "Release candidate branch exists."
          else
            echo "Release candidate branch does not exist."
          fi
        id: check-rc-branch

      - name: Create release-candidate branch if not exists
        run: |
          if [ "${{ steps.check-rc-branch.outputs.stdout }}" == "Release candidate branch does not exist." ]; then
            git checkout -b release-candidate
            git push origin release-candidate
          fi

      - name: Pull changes from development to release-candidate
        run: |
          git checkout release-candidate
          git pull origin development
          git push origin release-candidate
